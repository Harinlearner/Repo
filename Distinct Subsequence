class Solution {
public:
    int find(int i,int j,string &s,string &t,vector<vector<int>>&dp)
    {
        if(j==0)
        {
            return dp[i][j]=1;
        }
        if(i==0)
        {
            return dp[i][j]=0;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int a=0,b=0;
        if(s[i-1]==t[j-1]){
            a=find(i-1,j-1,s,t,dp);
        }
        b=find(i-1,j,s,t,dp);
        return dp[i][j]=a+b;
    }
    int numDistinct(string s, string t) {
        int n1=s.length();
        int n2=t.length();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,-1));
        for(int i=0;i<=n1;i++)
        {
            for(int j=0;j<=n2;j++)
            {
                if(j==0)
                {
                    dp[i][j]=1;
                }
                else if(i==0)
                {
                    dp[i][j]=0;
                }
                else
                {
                    int a=0,b=0;
                    if(s[i-1]==t[j-1]){
                        a=dp[i-1][j-1];
                    }
                    b=dp[i-1][j];;
                    dp[i][j]=((long)a+b)%(INT_MAX);
                }
            }
        }
        return dp[n1][n2];
        // for(int i=0;i<=n1;i++)
        // {
        //     for(int j=0;j<=n2;j++)
        //     {
        //         cout<<dp[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
        // return find(n1,n2,s,t,dp);
    }
};
