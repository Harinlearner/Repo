class Solution {
public: 
    
    double knightProbability(int n, int k, int row, int column) {
    //    vector<vector<int>>dp(n,vector<int>(n,0));
       vector<vector<double>>dp(n,vector<double>(n,0));
       int di[]={-2,-2,+2,+2,-1,+1,+1,-1};
       int dj[]={-1,+1,+1,-1,-2,-2,+2,+2};
       vector<vector<double>>prev(n,vector<double>(n,0));
       prev[row][column]=1;
       for(int step=0;step<=k;step++)
       {
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                {
                    dp[i][j]=0;
                    for(int l=0;l<8;l++)
                    {
                        int ni=i-di[l];
                        int nj=j-dj[l];
                        if(ni>=0 && nj>=0 && ni<n && nj<n)
                        {
                            dp[i][j]+=prev[ni][nj]/8.0;
                        }
                    }
                }
            }
            swap(dp,prev);
       }
       double sum=0;
       for(int i=0;i<n;i++)
       {
        for(int j=0;j<n;j++)
        {
            sum+=dp[i][j];
        }
       }
       return sum;
    }
};
