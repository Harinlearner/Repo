class Solution {
public:
    void find(int ind,vector<vector<string>>&res,vector<string>&temp,string &s,vector<vector<int>>&dp)
    {
        if(ind>=s.length())
        {
            res.push_back(temp);
            return ;
        }
        for(int col=0;col<s.length();col++)
        {
           if(dp[ind][col]>0)
           {
             temp.push_back(s.substr(ind,dp[ind][col]));
             find(ind+dp[ind][col],res,temp,s,dp);
             temp.pop_back();
           }
        }
        
    }
    vector<vector<string>> partition(string s) {
        int n = s.length();
        vector<vector<int>>dp(n,vector<int>(n,0));
         vector<vector<string>>res;
         vector<string>temp;
        for(int diff=0;diff<n;diff++)
        {
            for(int i=0,j=diff;j<n;i++,j++)
            {
                if(i==j)
                {
                    dp[i][j]=1;
                }
                else if(diff==1)
                {
                    dp[i][j]=(s[i]==s[j])?2:0;
                }
                else
                {
                    if(i<n-1 && j>0 && dp[i+1][j-1]!=0)
                    {
                        dp[i][j]=(s[i]==s[j])?dp[i+1][j-1]+2:0;
                    }
                }
            }
        }
        find(0,res,temp,s,dp);
        return res;
    }
};
