/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void merge(TreeNode* root1,TreeNode* root2,TreeNode *temp,int side)
    {
        if(root1==NULL && root2==NULL)
        {
            return ;
        }
        if(root1==NULL)
        {
            if(side==2)
            {
                temp->right=root2;
                return;
            }
                temp->left=root2;
                return ;
        }
        else if(root2==NULL)
        {
            if(side==2)
            {
                temp->right=root1;
                return;
            }
                temp->left=root1;
                return;
        }
        else 
        {
            root1->val+=root2->val;
            merge(root1->left,root2->left,root1,1);
            merge(root1->right,root2->right,root1,2);
        }
    }
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(root1==NULL && root2!=NULL)
        {
            return root2;
        }
        if(root1!=NULL && root2==NULL)
        {
            return root1;
        }
        TreeNode *temp=new TreeNode(-1);
        merge(root1,root2,temp,0);
        return root1;
    }
};
