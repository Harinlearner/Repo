class Solution {
public:
    int find(int i,int buy,vector<int>&prices, vector<vector<int>>&dp)
    {
        if(i>=prices.size())
        {
            return 0;
        }
        if(dp[i][buy]!=-1)
        {
            return dp[i][buy];
        }
        if(buy==0)
        {
            return dp[i][buy]=max(-prices[i]+find(i+1,1,prices,dp),find(i+1,0,prices,dp));
        }

            return dp[i][buy]=max(prices[i]+find(i+2,0,prices,dp),find(i+1,1,prices,dp));
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(prices.size()+2,vector<int>(2,0));
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=1;buy>=0;buy--)
            {
                if(buy==0)
                {
                    dp[i][buy]=max(-prices[i]+dp[i+1][1],dp[i+1][0]);
                }
                else
                    dp[i][buy]=max(prices[i]+dp[i+2][0],dp[i+1][1]);
            }
        }
        return dp[0][0];
        // return find(0,0,prices,dp);
    }
};
