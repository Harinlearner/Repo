/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
       Node *temp = head;
       while(temp!=NULL)
       {
            Node* newnode=new Node(temp->val);
            newnode->next=temp->next;
            temp->next=newnode;
            temp=temp->next->next;
       }
       Node *dummy=new Node(-1);
       Node *res=dummy;
    //    temp=head;
    //    while(temp!=NULL)
    //    {
    //         cout<<temp->val<<" ";
    //         temp=temp->next;
    //    }
       temp=head;
       while(temp!=NULL)
       {
            if(temp->random==NULL)
            {
                temp->next->random = NULL;
            }
            else
            {
                temp->next->random = temp->random->next;
            }
            temp=temp->next->next;
       }
       temp=head;
       Node *real=new Node(-1);
       while(temp!=NULL)
       {
            // Node *n=temp->next->next;
            dummy->next=temp->next;
            dummy=dummy->next;
            temp->next=temp->next->next;
            temp=temp->next;  
       }
        return res->next;
    }
};
