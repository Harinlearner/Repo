class Solution {
public:
    void dfs(int i,int j,vector<vector<char>>& grid,vector<vector<bool>>&visit)
    {
        visit[i][j]=true;
        int r[]={-1,1,0,0};
        int c[]={0,0,-1,1};
        for(int l=0;l<4;l++)
        {
              
                int nRow=r[l]+i;
                int nCol=c[l]+j;
                if(nRow>=0 && nCol>=0 && nRow<grid.size() && nCol<grid[0].size() && grid[nRow][nCol]=='1' && !visit[nRow][nCol])
                {
                    dfs(nRow,nCol,grid,visit);
                }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int c=0;
        vector<vector<bool>>visit(n,vector<bool>(m,false));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!visit[i][j] && grid[i][j]=='1')
                {
                    c++;
                    dfs(i,j,grid,visit);
                }
            }
        }
        return c;
    }
};
