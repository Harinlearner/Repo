class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        
        int n=heights.size();
        if(n==1)
        {
            return heights[0];
        }
        vector<int>left(n,-1);
        vector<int>right(n,-1);
        stack<pair<int,int>>st;
        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() && st.top().first>=heights[i])
            {
                st.pop();
            }
            if(!st.empty())
            {
                right[i]=st.top().second;
            }
           
            st.push({heights[i],i});
        }
        while(!st.empty())
        {
            st.pop();
        }
        for(int i=0;i<n;i++)
        {
            while(!st.empty() && st.top().first>=heights[i])
            {
                st.pop();
            }
            if(!st.empty())
            {
               left[i]=st.top().second;
            }
            st.push({heights[i],i});
        }
        int maxi=INT_MIN;
       
        for(int i=0;i<n;i++)
        {
            int leftEnd=0,rightEnd=0;
            leftEnd=(left[i]!=-1)?left[i]:-1; // it is not zero because it is like finding longest valid parenthesis problem
            rightEnd=(right[i]!=-1)?right[i]:n;
            int area=heights[i]*(rightEnd-leftEnd-1);
            // cout<<area<<" ";
            maxi=max(area,maxi);
        }
        return maxi;
    }
};
